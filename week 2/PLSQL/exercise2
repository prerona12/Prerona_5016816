--Exercise 2: Error Handling
--Scenario 1: Handle exceptions during fund transfers between accounts.
--Question: Write a stored procedure SafeTransferFunds that transfers funds between two accounts. Ensure that if any error occurs (e.g., insufficient funds), an appropriate error message is logged and the transaction is rolled back.


CREATE TABLE accounts (
    account_id NUMBER PRIMARY KEY,
    account_name VARCHAR2(100),
    balance NUMBER
);

-- Insert sample data into the accounts table
INSERT INTO accounts (account_id, account_name, balance) VALUES (1, 'Account A', 1000);
INSERT INTO accounts (account_id, account_name, balance) VALUES (2, 'Account B', 500);
CREATE TABLE error_log (
    error_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    error_message VARCHAR2(4000),
    error_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) AS
    l_from_balance NUMBER;
    l_to_balance NUMBER;
    l_error_message VARCHAR2(4000);
BEGIN
    -- Check balances and perform the transfer
    SELECT balance INTO l_from_balance FROM accounts WHERE account_id = p_from_account_id;
    SELECT balance INTO l_to_balance FROM accounts WHERE account_id = p_to_account_id;
    
    IF l_from_balance < p_amount THEN
        l_error_message := 'Insufficient funds in account ID ' || p_from_account_id;
        INSERT INTO error_log (error_message) VALUES (l_error_message);
        RAISE_APPLICATION_ERROR(-20001, l_error_message);
    ELSE
        UPDATE accounts
        SET balance = balance - p_amount
        WHERE account_id = p_from_account_id;
        
        UPDATE accounts
        SET balance = balance + p_amount
        WHERE account_id = p_to_account_id;
    END IF;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Transfer successful from account ' || p_from_account_id || ' to account ' || p_to_account_id);
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        l_error_message := SQLERRM;
        INSERT INTO error_log (error_message) VALUES (l_error_message);
        DBMS_OUTPUT.PUT_LINE('Transfer failed: ' || l_error_message);
END SafeTransferFunds;
/
-- Enable output
SET SERVEROUTPUT ON;

-- Test with sufficient funds
BEGIN
    SafeTransferFunds(1, 2, 200);
END;
/

-- Test with insufficient funds
BEGIN
    SafeTransferFunds(2, 1, 1000);
END;
/


--Scenario 2: Manage errors when updating employee salaries.
--Question: Write a stored procedure UpdateSalary that increases the salary of an employee by a given percentage. If the employee ID does not exist, handle the exception and log an error message.


CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employee_id IN NUMBER,
    p_percentage IN NUMBER
) AS
    l_current_salary NUMBER;
    l_error_message VARCHAR2(4000);
BEGIN
    -- Attempt to get the current salary
    BEGIN
        SELECT salary INTO l_current_salary FROM employees WHERE employee_id = p_employee_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            l_error_message := 'Employee ID ' || p_employee_id || ' does not exist.';
            INSERT INTO error_log (error_message) VALUES (l_error_message);
            RAISE_APPLICATION_ERROR(-20001, l_error_message);
    END;
    
    -- Perform the salary update
    UPDATE employees
    SET salary = salary + (salary * p_percentage / 100)
    WHERE employee_id = p_employee_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Salary updated successfully for employee ID ' || p_employee_id);
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        l_error_message := SQLERRM;
        INSERT INTO error_log (error_message) VALUES (l_error_message);
        DBMS_OUTPUT.PUT_LINE('Salary update failed: ' || l_error_message);
END UpdateSalary;
/
-- Enable output
SET SERVEROUTPUT ON;

-- Test with an existing employee
BEGIN
    UpdateSalary(1, 10);  -- Increase salary by 10%
END;
/

-- Test with a non-existing employee
BEGIN
    UpdateSalary(3, 10);  -- Employee ID 3 does not exist
END;
/


--Scenario 3: Ensure data integrity when adding a new customer.
--Question: Write a stored procedure AddNewCustomer that inserts a new customer into the Customers table. If a customer with the same ID already exists, handle the exception by logging an error and preventing the insertion.


CREATE TABLE customers (
    customer_id NUMBER PRIMARY KEY,
    name VARCHAR2(100),
    age NUMBER,
    balance NUMBER,
    loan_interest_rate NUMBER,
    is_vip CHAR(1)
);

-- Insert sample data into the customers table
INSERT INTO customers (customer_id, name, age, balance, loan_interest_rate, is_vip)
VALUES (1, 'John Doe', 65, 15000, 5.0, 'N');
INSERT INTO customers (customer_id, name, age, balance, loan_interest_rate, is_vip)
VALUES (2, 'Jane Smith', 58, 8000, 4.5, 'N');
CREATE TABLE error_log (
    error_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    error_message VARCHAR2(4000),
    error_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customer_id IN NUMBER,
    p_name IN VARCHAR2,
    p_age IN NUMBER,
    p_balance IN NUMBER,
    p_loan_interest_rate IN NUMBER,
    p_is_vip IN CHAR
) AS
    l_error_message VARCHAR2(4000);
BEGIN
    -- Attempt to insert a new customer
    BEGIN
        INSERT INTO customers (customer_id, name, age, balance, loan_interest_rate, is_vip)
        VALUES (p_customer_id, p_name, p_age, p_balance, p_loan_interest_rate, p_is_vip);
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Customer added successfully: ' || p_name);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            l_error_message := 'Customer ID ' || p_customer_id || ' already exists.';
            INSERT INTO error_log (error_message) VALUES (l_error_message);
            RAISE_APPLICATION_ERROR(-20001, l_error_message);
    END;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        l_error_message := SQLERRM;
        INSERT INTO error_log (error_message) VALUES (l_error_message);
        DBMS_OUTPUT.PUT_LINE('Customer addition failed: ' || l_error_message);
END AddNewCustomer;
/

SET SERVEROUTPUT ON;

-- Test with a new customer
BEGIN
    AddNewCustomer(3, 'Alice Johnson', 70, 12000, 3.8, 'N');
END;
/

-- Test with an existing customer ID
BEGIN
    AddNewCustomer(1, 'Bob Brown', 45, 3000, 6.0, 'N');  -- Customer ID 1 already exists
END;
/
