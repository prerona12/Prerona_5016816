//Exercise 2: E-commerce Platform Search Function
import java.util.Arrays;
import java.util.Comparator;


//start from here 
public class ECommercePlatformSearch {
    public static void main(String[] args) {
        Product[] products = {
            new Product("1", "Pencil", "Stationery"),
            new Product("2", "Laptop", "Electronics"),
            new Product("3", "Tablet", "Electronics"),
            new Product("4", "Notebooks", "Stationery"),
            new Product("5", "Television", "Electronics")
        };

        // Linear Search
        Product result = LinearSearch.linearSearch(products, "4");
        System.out.println("Linear Search Result: " + (result != null ? result : "item not found"));

        // Binary Search
        result = BinarySearch.binarySearch(products, "4");
        System.out.println("Binary Search Result: " + (result != null ? result : "item not found"));
    }
}


class Product {
    private String productId;
    private String productName;
    private String category;

    public Product(String productId, String productName, String category) {
        this.productId = productId;
        this.productName = productName;
        this.category = category;
    }

    // Getters and Setters
    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    @Override
    public String toString() {
        return "Product ID: " + productId + ", Name: " + productName + ", Category: " + category;
    }
}

class LinearSearch {
    public static Product linearSearch(Product[] products, String targetId) {
        for (Product product : products) {
            if (product.getProductId().equals(targetId)) {
                return product;
            }
        }
        return null;
    }
}

class BinarySearch {
    public static Product binarySearch(Product[] products, String targetId) {
        Arrays.sort(products, Comparator.comparing(Product::getProductId));
        int left = 0;
        int right = products.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int cmp = products[mid].getProductId().compareTo(targetId);
            
            if (cmp == 0) {
                return products[mid];
            } else if (cmp < 0) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return null;
    }
}

